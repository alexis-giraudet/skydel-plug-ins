#pragma once

#include <memory>
#include <string>
#include <vector>

#include "command_base.h"
#include "command_factory.h"

namespace Sdx
{
namespace Cmd
{
///
/// Set the NMEA sentences that will be generated by the logger.
///
/// Name      Type         Description
/// --------- ------------
/// ------------------------------------------------------------------------------------------------------- Sentences
/// array string Identifiers of the NMEA sentences to generate, only "GGA", "GLL", "GSV", "RMC" and "ZDA" are supported.
///

class SetNmeaLoggerSentences;
typedef std::shared_ptr<SetNmeaLoggerSentences> SetNmeaLoggerSentencesPtr;

class SetNmeaLoggerSentences : public CommandBase
{
public:
  inline static const char* const CmdName = "SetNmeaLoggerSentences";
  inline static const char* const Documentation =
    "Set the NMEA sentences that will be generated by the logger.\n"
    "\n"
    "Name      Type         Description\n"
    "--------- ------------ -------------------------------------------------------------------------------------------------------\n"
    "Sentences array string Identifiers of the NMEA sentences to generate, only \"GGA\", \"GLL\", \"GSV\", \"RMC\" and \"ZDA\" are supported.";
  inline static const char* const TargetId = "";

  SetNmeaLoggerSentences() : CommandBase(CmdName, TargetId) {}

  SetNmeaLoggerSentences(const std::vector<std::string>& sentences) : CommandBase(CmdName, TargetId)
  {

    setSentences(sentences);
  }

  static SetNmeaLoggerSentencesPtr create(const std::vector<std::string>& sentences)
  {
    return std::make_shared<SetNmeaLoggerSentences>(sentences);
  }

  static SetNmeaLoggerSentencesPtr dynamicCast(CommandBasePtr ptr)
  {
    return std::dynamic_pointer_cast<SetNmeaLoggerSentences>(ptr);
  }

  virtual bool isValid() const override
  {

    return m_values.IsObject() && parse_json<std::vector<std::string>>::is_valid(m_values["Sentences"]);
  }

  virtual std::string documentation() const override { return Documentation; }

  virtual const std::vector<std::string>& fieldNames() const override
  {
    static const std::vector<std::string> names {"Sentences"};
    return names;
  }

  int executePermission() const { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; }

  std::vector<std::string> sentences() const
  {
    return parse_json<std::vector<std::string>>::parse(m_values["Sentences"]);
  }

  void setSentences(const std::vector<std::string>& sentences)
  {
    m_values.AddMember("Sentences",
                       parse_json<std::vector<std::string>>::format(sentences, m_values.GetAllocator()),
                       m_values.GetAllocator());
  }
};
REGISTER_COMMAND_TO_FACTORY(SetNmeaLoggerSentences);
} // namespace Cmd
} // namespace Sdx
